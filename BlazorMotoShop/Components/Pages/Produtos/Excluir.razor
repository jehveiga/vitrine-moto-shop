@page "/produtos/excluir/{id:int}"
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject ILogger<Categoria> Logger


@if (Produto is null)
{
    <p class="text-light">Produto não encontrado</p>
}
else
{
    <EditForm Model="@Produto" OnSubmit="OnSubimitAsync">
        <div class="container">
            <div class="row">
                <div class="col-sm-3">
                    <img src="uploads/@Produto.ImageUrl" alt="Imagem moto detalhes" />
                </div>
                <div class="col-sm-9 mt-3">
                    <div class="row text-center justify-content-center">
                        <div class="col-12 col-sm-6 text-info">
                            <h3>@Produto.Nome</h3>
                        </div>
                    </div>
                    <div class="row text-center justify-content-center">
                        <div class="col-4 col-sm-6 text-light mt-3">
                            @Produto.Preco.ToString("C")
                        </div>
                    </div>
                    <div class="row justify-content-center">
                        <div class="col-6 col-sm-8 text-light mt-3">
                            <p>@Produto.Descricao</p>
                        </div>
                    </div>
                    <div class="row text-center justify-content-center">
                        <div class="col-8 col-sm-10 mt-2 ">
                            <a href="produtos" class="btn btn-outline-warning">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-return-left" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd" d="M14.5 1.5a.5.5 0 0 1 .5.5v4.8a2.5 2.5 0 0 1-2.5 2.5H2.707l3.347 3.346a.5.5 0 0 1-.708.708l-4.2-4.2a.5.5 0 0 1 0-.708l4-4a.5.5 0 1 1 .708.708L2.707 8.3H12.5A1.5 1.5 0 0 0 14 6.8V2a.5.5 0 0 1 .5-.5" />
                                </svg>
                                Voltar
                            </a>
                            <button type="submit" class="btn btn-outline-danger">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash3-fill" viewBox="0 0 16 16">
                                    <path d="M11 1.5v1h3.5a.5.5 0 0 1 0 1h-.538l-.853 10.66A2 2 0 0 1 11.115 16h-6.23a2 2 0 0 1-1.994-1.84L2.038 3.5H1.5a.5.5 0 0 1 0-1H5v-1A1.5 1.5 0 0 1 6.5 0h3A1.5 1.5 0 0 1 11 1.5m-5 0v1h4v-1a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5M4.5 5.029l.5 8.5a.5.5 0 1 0 .998-.06l-.5-8.5a.5.5 0 1 0-.998.06m6.53-.528a.5.5 0 0 0-.528.47l-.5 8.5a.5.5 0 0 0 .998.058l.5-8.5a.5.5 0 0 0-.47-.528M8 4.5a.5.5 0 0 0-.5.5v8.5a.5.5 0 0 0 1 0V5a.5.5 0 0 0-.5-.5" />
                                </svg>
                                Excluir
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}

@code {
    [Inject]
    public IProdutoRepository? ProdutoRepository { get; set; }

    [Inject]
    public IManipuladorArquivo? ManipuladorArquivo { get; set; }

    [Parameter]
    public int Id { get; set; }

    protected Produto? Produto { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Produto = await ProdutoRepository.ObterProdutoPorId(Id);
        }
        catch (Exception ex)
        {
            Logger.LogInformation($"Falha no servidor! Error: {ex.Message}");
            throw;
        }
    }

    protected async void OnSubimitAsync()
    {
        try
        {
            ManipuladorArquivo.ExcluiArquivoSalvo(Produto.ImageUrl);

            await ProdutoRepository.DeletarProduto(Produto);

            Navigation.NavigateTo("produtos");
        }
        catch (Exception ex)
        {
            Logger.LogInformation($"Falha no servidor! Error: {ex.Message}");
            throw;
        }
    }
}
